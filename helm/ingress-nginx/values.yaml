commonLabels: {}
# scmhash: abc123
# myLabel: aakkmd

controller:
  name: controller
  image:
    chroot: false
    registry: registry.k8s.io
    image: ingress-nginx/controller
    tag: "v1.2.1"
    digest: sha256:5516d103a9c2ecc4f026efbd4b40662ce22dc1f824fb129ed121460aaa5c47f8
    digestChroot: sha256:d301551cf62bc3fb75c69fa56f7aa1d9e87b5079333adaf38afe84d9b7439355
    pullPolicy: IfNotPresent
    runAsUser: 101
    allowPrivilegeEscalation: true

  existingPsp: ""

  containerName: controller

  containerPort:
    http: 80
    https: 443

  dnsPolicy: ClusterFirst

  reportNodeInternalIp: false

  watchIngressWithoutClass: false

  ingressClassByName: false

  allowSnippetAnnotations: true

  hostNetwork: false

  hostPort:
    enabled: true
    ports:
      http: 80
      https: 443

  electionID: ingress-controller-leader

  ingressClassResource:
    name: nginx
    enabled: true
    default: true
    controllerValue: "k8s.io/ingress-nginx"

  ingressClass: nginx

  publishService:
    enabled: true
    pathOverride: ""

  scope:
    enabled: false
    namespace: ""
    namespaceSelector: ""

  configMapNamespace: ""

  tcp:
    configMapNamespace: ""
    annotations: {}

  udp:
    configMapNamespace: ""

  maxmindLicenseKey: ""

  kind: Deployment

  updateStrategy: 
   rollingUpdate:
     maxUnavailable: 1
   type: RollingUpdate

  minReadySeconds: 0

  terminationGracePeriodSeconds: 300

  nodeSelector:
    kubernetes.io/os: linux

  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3


  healthCheckPath: "/healthz"

  healthCheckHost: ""

  replicaCount: 1

  minAvailable: 1

  resources:
    limits:
      cpu: 100m
      memory: 90Mi
    requests:
      cpu: 100m
      memory: 90Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  enableMimalloc: true

  service:
    enabled: true
    appProtocol: true

    ipFamilyPolicy: "SingleStack"
    ipFamilies:
      - IPv4

    ports:
      http: 80
      https: 443

    targetPorts:
      http: http
      https: https

    type: LoadBalancer

    type: NodePort
    nodePorts:
      http: 32080
      https: 32443
      tcp:
        8080: 32808

  metrics:
    port: 10254
    enabled: true

    service:
      annotations: 
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"

      servicePort: 10254
      type: ClusterIP

    serviceMonitor:
      enabled: true

